{"version":3,"sources":["../../../api/v1/controllers/questions.js"],"names":["require","config","router","express","Router","questions","dbpackage","answers","pool","pg","Pool","host","process","env","POSTGRES_AWS_HOST","user","POSTGRES_USER","database","POSTGRES_DATABASE","password","POSTGRES_PASSWORD","port","POSTGRES_PORT","ssl","verifyToken","req","res","next","bearHeader","headers","authorization","split","token","status","json","success","message","get","jwt","verify","JWT_SECRET_KEY","error","connect","err","client","done","query","bugFound","result","rows","id","params","replace","Number","length","errForAns","data","msg","question","post","keyword","body","found","filter","o","toLowerCase","indexOf","send","qId","qid","questionId","title","userData","authUser","userid","username","answer","delete","questId","put","answerId","aId","map","votes","answerStack","uId","userQuestions","qtn","userId","questionsAnswered","push","modeqtn","topqtn","ansId","comment","ans","comments","commentId"],"mappings":"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","file":"questions.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport express from 'express';\r\nimport pg from 'pg';\r\nimport dbpackage from '../model/dbstruct';\r\nimport generateUniqueId from '../helpers/genUniqueId';\r\nimport mode from '../helpers/mode';\r\n\r\nrequire('dotenv').config();\r\n\r\nconst router = express.Router();\r\nconst { questions, answers } = dbpackage;\r\nconst pool = new pg.Pool({\r\n  host: process.env.POSTGRES_AWS_HOST,\r\n  user: process.env.POSTGRES_USER,\r\n  database: process.env.POSTGRES_DATABASE,\r\n  password: process.env.POSTGRES_PASSWORD,\r\n  port: process.env.POSTGRES_PORT,\r\n  ssl: true,\r\n});\r\n\r\nconst verifyToken = (req, res, next) => {\r\n  const bearHeader = req.headers.authorization;\r\n  if (bearHeader) {\r\n    [, req.token] = bearHeader.split(' ');\r\n    next();\r\n  } else {\r\n    res.status(401).json({\r\n      success: false,\r\n      message: 'JWT Authentication Error',\r\n    });\r\n  }\r\n};\r\n\r\nrouter.get('/', verifyToken, (req, res) => {\r\n  jwt.verify(req.token, process.env.JWT_SECRET_KEY, (error) => {\r\n    if (error) {\r\n      res.status(417).json({\r\n        success: true,\r\n        message: 'An error occured while verifying token',\r\n      });\r\n    } else {\r\n      pool.connect((err, client, done) => {\r\n        if (err) {\r\n          return res.status(200).json({\r\n            success: false,\r\n            message: err,\r\n          });\r\n        }\r\n        client.query('SELECT * FROM questions', (bugFound, result) => {\r\n          res.status(200).json({\r\n            success: true,\r\n            message: 'All questions retrieved',\r\n            questions: result.rows,\r\n          });\r\n        });\r\n        done();\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nrouter.get('/:id', verifyToken, (req, res) => {\r\n  jwt.verify(req.token, process.env.JWT_SECRET_KEY, (error) => {\r\n    if (error) {\r\n      res.status(401).json({\r\n        success: true,\r\n        message: 'An error occured while verifying token',\r\n      });\r\n    } else {\r\n      let { id } = req.params;\r\n      id = id.replace(/[^0-9]+/, '');\r\n      id = Number(id);\r\n      if (id) {\r\n        pool.connect((err, client, done) => {\r\n          if (err) {\r\n            return res.status(500).json({\r\n              success: false,\r\n              message: err,\r\n            });\r\n          }\r\n          client.query('SELECT * FROM questions WHERE questionid=$1', [id], (error, result) => {\r\n            if (!result || result.rows.length === 0) {\r\n              res.status(200).json({\r\n                message: 'This question id does not exist in the database',\r\n                success: false,\r\n              });\r\n            } else {\r\n              client.query('SELECT * FROM answers WHERE questionid=$1', [id], (errForAns, answers) => {\r\n                if (answers.rows.length === 0) {\r\n                  res.status(200).json({\r\n                    message: 'Specified question retrieved',\r\n                    success: true,\r\n                    data: result.rows,\r\n                  });\r\n                } else {\r\n                  res.status(200).json({\r\n                    msg: 'Specified question retrieved',\r\n                    success: true,\r\n                    data: {\r\n                      question: result.rows,\r\n                      answers: answers.rows,\r\n                    },\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          });\r\n          done();\r\n        });\r\n      } else {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Id must be a number',\r\n        });\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nrouter.post('/findQuestion', (req, res) => {\r\n  const { keyword } = req.body;\r\n  const found = questions.filter(\r\n    o => o.question.toLowerCase().indexOf(keyword.toLowerCase()) !== -1,\r\n  );\r\n  if (found.length !== 0) {\r\n    res.json(found);\r\n  } else {\r\n    res.send('Keyword not found!');\r\n  }\r\n});\r\n\r\nrouter.post('/findQuestionById', (req, res) => {\r\n  const qId = Number(req.body.qid);\r\n  const found = questions.filter(question => question.questionId === qId);\r\n  if (found.length !== 0) {\r\n    res.json(found);\r\n  } else {\r\n    res.send('Question id not found!');\r\n  }\r\n});\r\n\r\nrouter.post('/', verifyToken, (req, res) => {\r\n  if (!req.body.question || !req.body.title) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'There is a missing field',\r\n    });\r\n  } else {\r\n    jwt.verify(req.token, process.env.JWT_SECRET_KEY, (error, userData) => {\r\n      if (error) {\r\n        res.status(401).json({\r\n          success: true,\r\n          message: 'An error occured while verifying token',\r\n        });\r\n      } else {\r\n        pool.connect((err, client, done) => {\r\n          if (err) {\r\n            return res.status(500).json({\r\n              success: false,\r\n              message: err,\r\n            });\r\n          }\r\n          client.query('INSERT INTO questions(userid, username, question, title) VALUES($1, $2, $3, $4)', [\r\n            Number(userData.authUser.userid),\r\n            userData.authUser.username,\r\n            req.body.question,\r\n            req.body.title,\r\n          ]);\r\n          done();\r\n          res.status(201).json({\r\n            success: true,\r\n            message: 'Question posted',\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\nrouter.post('/:id/answers', verifyToken, (req, res) => {\r\n  if (!req.body.answer) {\r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'No answer was sent',\r\n    });\r\n  } else {\r\n    jwt.verify(req.token, process.env.JWT_SECRET_KEY, (error, userData) => {\r\n      if (error) {\r\n        res.status(401).json({\r\n          success: true,\r\n          message: 'An error occured while verifying token',\r\n        });\r\n      } else {\r\n        pool.connect((err, client, done) => {\r\n          if (err) {\r\n            return res.status(500).json({\r\n              success: false,\r\n              message: err,\r\n            });\r\n          }\r\n          client.query('INSERT INTO answers(questionid, userid, username, answer, state, upvotes, downvotes) VALUES($1, $2, $3, $4, $5, $6, $7)', [\r\n            req.params.id,\r\n            userData.authUser.userid,\r\n            userData.authUser.username,\r\n            req.body.answer,\r\n            0,\r\n            0,\r\n            0,\r\n          ]);\r\n          done();\r\n          res.status(201).json({\r\n            success: true,\r\n            message: 'Answer posted',\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\nrouter.delete('/:id', verifyToken, (req, res) => {\r\n  jwt.verify(req.token, process.env.JWT_SECRET_KEY, (error, userData) => {\r\n    if (error) {\r\n      res.status(401).json({\r\n        success: true,\r\n        message: 'An error occured while verifying token',\r\n      });\r\n    } else {\r\n      const questId = Number(req.params.id);\r\n      pool.connect((err, client, done) => {\r\n        if (err) {\r\n          return res.status(500).json({\r\n            success: false,\r\n            message: err,\r\n          });\r\n        }\r\n        client.query('SELECT * FROM questions WHERE questionid=$1 AND userid=$2', [questId, userData.authUser.userid], (error, result) => {\r\n          if (error) {\r\n            return res.status(500).json({\r\n              success: false,\r\n              message: error,\r\n            });\r\n          }\r\n          if (result.rows.length === 0) {\r\n            res.status(401).json({\r\n              success: false,\r\n              message: 'You cannot delete this question',\r\n            });\r\n          } else {\r\n            client.query('DELETE FROM questions WHERE questionid=$1', [questId]);\r\n            res.status(200).json({\r\n              success: true,\r\n              message: 'Question deleted',\r\n            });\r\n          }\r\n        });\r\n        done();\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nrouter.put('/:qId/answers/:aId/', verifyToken, (req, res) => {\r\n  jwt.verify(req.token, process.env.JWT_SECRET_KEY, (error, userData) => {\r\n    if (error) {\r\n      res.status(401).json({\r\n        success: true,\r\n        message: 'An error occured while verifying token',\r\n      });\r\n    } else {\r\n      const questId = Number(req.params.qId);\r\n      const answerId = Number(req.params.aId);\r\n      pool.connect((err, client, done) => {\r\n        if (err) {\r\n          return res.status(200).json({\r\n            message: err,\r\n            success: false,\r\n          });\r\n        }\r\n        client.query('SELECT * FROM questions WHERE questionid=$1 AND userid=$2', [questId, userData.authUser.userid], (error, result) => {\r\n          if (error) {\r\n            return res.status(200).json({\r\n              success: false,\r\n              message: error,\r\n            });\r\n          }\r\n          if (result.rows.length === 0) {\r\n            return res.status(200).json({\r\n              success: false,\r\n              message: 'You cannot accept this question, you are not the author',\r\n            });\r\n          }\r\n          client.query('UPDATE answers SET state=$1 WHERE answerid=$2', [1, answerId]);\r\n          done();\r\n          res.status(202).json({\r\n            success: true,\r\n            message: 'Answer accepted',\r\n          });\r\n        });\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nrouter.get('/:qId/:aId/vote', (req, res) => {\r\n  answers.map((answer) => {\r\n    if (answer.questionId === Number(req.params.qId)\r\n    && answer.answerId === Number(req.params.aId)) {\r\n      answer.votes += 1;\r\n    }\r\n    return false;\r\n  });\r\n  res.json(answers);\r\n});\r\n\r\nrouter.get('/:downvote/:qId/:aId', (req, res) => {\r\n  answers.map((answer) => {\r\n    if (answer.questionId === Number(req.params.qId)\r\n    && answer.answerId === Number(req.params.aId)) {\r\n      if (answer.votes > 0) {\r\n        answer.votes -= 1;\r\n      } else {\r\n        answer.votes = answer.votes;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n  res.json(answers);\r\n});\r\n\r\nrouter.get('/user/asked', verifyToken, (req, res) => {\r\n  jwt.verify(req.token, process.env.JWT_SECRET_KEY, (error, userData) => {\r\n    if (error) {\r\n      res.status(401).json({\r\n        success: true,\r\n        message: 'An error occured while verifying token',\r\n      });\r\n    } else {\r\n      pool.connect((err, client, done) => {\r\n        if (err) {\r\n          return res.status(500).json({\r\n            success: false,\r\n            message: err,\r\n          });\r\n        }\r\n        client.query('SELECT * FROM questions WHERE userid=$1', [userData.authUser.userid], (errForAns, result) => {\r\n          if (!result || result.rows.length === 0) {\r\n            res.status(200).json({\r\n              success: false,\r\n              message: 'You dont have any question on the this platform, try adding one',\r\n            });\r\n          } else {\r\n            res.status(200).json({\r\n              message: 'Your questions retrieved successfully',\r\n              success: true,\r\n              questions: result.rows,\r\n            });\r\n          }\r\n        });\r\n        done();\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nrouter.get('/user/answered', verifyToken, (req, res) => {\r\n  jwt.verify(req.token, process.env.JWT_SECRET_KEY, (error, userData) => {\r\n    if (error) {\r\n      res.status(401).json({\r\n        success: true,\r\n        message: 'An error occured while verifying token',\r\n      });\r\n    } else {\r\n      pool.connect((err, client, done) => {\r\n        if (err) {\r\n          return res.status(500).json({\r\n            success: false,\r\n            message: err,\r\n          });\r\n        }\r\n        client.query('SELECT * FROM answers WHERE userid=$1', [userData.authUser.userid], (errForAns, answerStack) => {\r\n          if (!answerStack || answerStack.rows.length === 0) {\r\n            res.status(200).json({\r\n              success: false,\r\n              message: 'You havent answered any questions on this platform, try ',\r\n            });\r\n          } else {\r\n            client.query('SELECT * FROM questions', (err, result) => {\r\n              if (err) {\r\n                return res.status(500).json({\r\n                  success: false,\r\n                  message: err,\r\n                });\r\n              }\r\n              res.status(200).json({\r\n                message: 'All Info retrieved successfully',\r\n                success: true,\r\n                data: {\r\n                  answers: answerStack.rows,\r\n                  questions: result.rows,\r\n                },\r\n              });\r\n            });\r\n          }\r\n        });\r\n        done();\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n\r\nrouter.get('/topquestion/:uId', (req, res) => {\r\n  const uId = Number(req.params.uId);\r\n  const userQuestions = questions.filter(qtn => Number(qtn.userId) === uId);\r\n  const questionsAnswered = [];\r\n  userQuestions.map((question) => {\r\n    answers.map((answer) => {\r\n      if (answer.questionId === question.questionId) {\r\n        questionsAnswered.push(question.questionId);\r\n      }\r\n      return false;\r\n    });\r\n    return false;\r\n  });\r\n  const modeqtn = mode(questionsAnswered);\r\n  const topqtn = userQuestions.filter(question => question.questionId === modeqtn);\r\n  res.json(topqtn);\r\n});\r\n\r\nrouter.post('/addcomment/:qId/:answerId', (req, res) => {\r\n  const questId = Number(req.params.qId);\r\n  const ansId = Number(req.params.answerId);\r\n  const { comment } = req.body;\r\n  answers.map((ans) => {\r\n   if (ans.questionId === questId && ans.answerId === ansId) {\r\n      ans.comments.push({\r\n        commentId: generateUniqueId(ans.comments, 'commentId'),\r\n        comment,\r\n        userId: req.body.userId,\r\n        username: req.body.username,\r\n        questionId: questId,\r\n      });\r\n    }\r\n    return false;\r\n  });\r\n  res.json(answers);\r\n});\r\n\r\nexport default router;\r\n"]}