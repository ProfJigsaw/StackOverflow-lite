{"version":3,"sources":["../../../api/v1/controllers/index.js"],"names":["router","express","Router","get","req","res","send","redirect","json","openapi","info","title","description","version","servers","url","paths","responses","content","schema","type","examples","post","requestBody","properties","password","username","value","email","delete","answer","userid","put","userId","question","components","securitySchemes","oauth2","flows","implicit","authorizationUrl","scopes","scope_name"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express';\r\nimport path from 'path';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get('/', (req, res) => {\r\n  res.send(`\r\n  Welcome to StackOverflow-Lite!\r\n  <p>To see the documetation of this API you can either: </p>\r\n  <p>Follow <a href=\"/api-docs\">this link</a> or Enter the following in the searchbar: <i>https://nvc-stackqa.herokuapp.com/api-docs.</i> </p>\r\n  `);\r\n});\r\n\r\nrouter.get('/api-docs', (req, res) => {\r\n  res.redirect('/api-docs');\r\n});\r\n\r\nrouter.get('/apidocs', (req, res) => {\r\n  res.json({\r\n    openapi: '3.0.1',\r\n    info: {\r\n      title: 'NWEZE VICTOR - StackOverflow-Lite Web Application',\r\n      description: 'A mini Q & A web application',\r\n      version: '0.1',\r\n    },\r\n    servers: [{\r\n      url: 'https://nvc-stackqa.herokuapp.com',\r\n    }],\r\n    paths: {\r\n      '/api/v1/questions/': {\r\n        get: {\r\n          description: 'Get all questions',\r\n          responses: {\r\n            200: {\r\n              description: 'Successfully returned all questions in the database',\r\n              content: {\r\n                'application/json; charset=utf-8': {\r\n                  schema: {\r\n                    type: 'string',\r\n                  },\r\n                  examples: {},\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      '/api/v1/auth/login': {\r\n        post: {\r\n          description: 'Route to log a user in',\r\n          requestBody: {\r\n            content: {\r\n              'application/json': {\r\n                schema: {\r\n                  type: 'object',\r\n                  properties: {\r\n                    password: {\r\n                      type: 'string',\r\n                    },\r\n                    username: {\r\n                      type: 'string',\r\n                    },\r\n                  },\r\n                },\r\n                examples: {\r\n                  0: {\r\n                    value: '{\\n    \"username\": \"jigsaw\",\\n    \"password\": \"jig\"\\n}',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n          responses: {\r\n            200: {\r\n              description: 'Successfully logged user in',\r\n              content: {\r\n                'text/html; charset=utf-8': {\r\n                  schema: {\r\n                    type: 'string',\r\n                  },\r\n                  examples: {},\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      '/api/v1/auth/signup': {\r\n        post: {\r\n          description: 'Route to sign a user in',\r\n          requestBody: {\r\n            content: {\r\n              'application/json': {\r\n                schema: {\r\n                  type: 'object',\r\n                  properties: {\r\n                    password: {\r\n                      type: 'string',\r\n                    },\r\n                    email: {\r\n                      type: 'string',\r\n                    },\r\n                    username: {\r\n                      type: 'string',\r\n                    },\r\n                  },\r\n                },\r\n                examples: {\r\n                  0: {\r\n                    value: '{\\n    \"username\": \"jamesy\",\\n    \"email\": \"jamesy@gmail.com\",\\n    \"password\": \"jam\"\\n}',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n          responses: {\r\n            200: {\r\n              description: 'Endpoint successfully sign in the new user',\r\n              content: {\r\n                'text/html; charset=utf-8': {\r\n                  schema: {\r\n                    type: 'string',\r\n                  },\r\n                  examples: {},\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      '/api/v1/questions/10': {\r\n        delete: {\r\n          description: 'Route to delete a question (by questions author)',\r\n          responses: {\r\n            200: {\r\n              description: 'Successfully deleted user',\r\n              content: {\r\n                'text/html; charset=utf-8': {\r\n                  schema: {\r\n                    type: 'string',\r\n                  },\r\n                  examples: {},\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      '/api/v1/questions/24/answers': {\r\n        post: {\r\n          description: 'Route to post an answer to a particular question',\r\n          requestBody: {\r\n            content: {\r\n              'application/json': {\r\n                schema: {\r\n                  type: 'object',\r\n                  properties: {\r\n                    answer: {\r\n                      type: 'string',\r\n                    },\r\n                    userid: {\r\n                      type: 'integer',\r\n                    },\r\n                    username: {\r\n                      type: 'string',\r\n                    },\r\n                  },\r\n                },\r\n                examples: {\r\n                  0: {\r\n                    value: '{\\n    \"username\": \"jigsaw\",\\n    \"userid\": 1,\\n    \"answer\": \"Life is soooo complex\"\\n}',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n          responses: {\r\n            200: {\r\n              description: 'Successfully posted answer',\r\n              content: {\r\n                'text/html; charset=utf-8': {\r\n                  schema: {\r\n                    type: 'string',\r\n                  },\r\n                  examples: {},\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      '/api/v1/questions/24/answers/1': {\r\n        put: {\r\n          description: 'Route to accept a particular answer (by questions author)',\r\n          requestBody: {\r\n            content: {\r\n              'application/json': {\r\n                schema: {\r\n                  type: 'object',\r\n                  properties: {\r\n                    userId: {\r\n                      type: 'integer',\r\n                    },\r\n                  },\r\n                },\r\n                examples: {\r\n                  0: {\r\n                    value: '{\\n    \"userId\": 3\\n}',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n          responses: {\r\n            200: {\r\n              description: 'successfully accepted a given question',\r\n              content: {\r\n                'text/html; charset=utf-8': {\r\n                  schema: {\r\n                    type: 'string',\r\n                  },\r\n                  examples: {},\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      '/api/v1/questions': {\r\n        post: {\r\n          description: 'Route to post a new question into the database',\r\n          requestBody: {\r\n            content: {\r\n              'application/json': {\r\n                schema: {\r\n                  type: 'object',\r\n                  properties: {\r\n                    question: {\r\n                      type: 'string',\r\n                    },\r\n                    userId: {\r\n                      type: 'integer',\r\n                    },\r\n                    username: {\r\n                      type: 'string',\r\n                    },\r\n                  },\r\n                },\r\n                examples: {\r\n                  0: {\r\n                    value: '{\\n    \"username\": \"jiggyjiggy\",\\n    \"userId\": 54,\\n    \"question\": \"Who is fejiro?\"\\n}',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n          responses: {\r\n            200: {\r\n              description: 'Successfully add question into database',\r\n              content: {\r\n                'text/html; charset=utf-8': {\r\n                  schema: {\r\n                    type: 'string',\r\n                  },\r\n                  examples: {},\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      '/api/v1/questions/24': {\r\n        get: {\r\n          description: 'Route to get a specific question',\r\n          responses: {\r\n            200: {\r\n              description: 'Successfully returned specific question',\r\n              content: {\r\n                'application/json; charset=utf-8': {\r\n                  schema: {\r\n                    type: 'string',\r\n                  },\r\n                  examples: {},\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    components: {\r\n      securitySchemes: {\r\n        oauth2: {\r\n          type: 'oauth2',\r\n          flows: {\r\n            implicit: {\r\n              authorizationUrl: 'http://yourauthurl.com',\r\n              scopes: {\r\n                scope_name: 'Enter your scopes here',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n});\r\nexport default router;\r\n"]}