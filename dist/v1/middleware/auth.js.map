{"version":3,"sources":["../../../api/v1/middleware/auth.js"],"names":["saltRounds","dotenv","config","router","pool","pg","Pool","host","process","env","POSTGRES_AWS_HOST","user","POSTGRES_USER","database","POSTGRES_DATABASE","password","POSTGRES_PASSWORD","port","POSTGRES_PORT","ssl","verifyToken","req","res","next","bearHeader","headers","authorization","split","token","status","json","success","message","post","body","username","connect","err","client","done","query","errors","result","rows","length","bcrypt","compare","bcryptres","authUser","jwt","sign","JWT_SECRET_KEY","jwerror","jwtoken","testEmail","email","emailregex","test","testUsername","usernameregex","trim","error","hash","jwterror","get","verify","userData","userid"],"mappings":"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","file":"auth.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport express from 'express';\r\nimport pg from 'pg';\r\nimport bcrypt from 'bcrypt';\r\nimport dotenv from 'dotenv';\r\n\r\nconst saltRounds = 1;\r\n\r\ndotenv.config();\r\n\r\nconst router = express();\r\nconst pool = new pg.Pool({\r\n  host: process.env.POSTGRES_AWS_HOST,\r\n  user: process.env.POSTGRES_USER,\r\n  database: process.env.POSTGRES_DATABASE,\r\n  password: process.env.POSTGRES_PASSWORD,\r\n  port: process.env.POSTGRES_PORT,\r\n  ssl: true,\r\n});\r\n\r\nconst verifyToken = (req, res, next) => {\r\n  const bearHeader = req.headers.authorization;\r\n  if (bearHeader) {\r\n    [, req.token] = bearHeader.split(' ');\r\n    next();\r\n  } else {\r\n    res.status(401).json({\r\n      success: false,\r\n      message: 'Recipe does not exist',\r\n    });\r\n  }\r\n};\r\n\r\nrouter.post('/login', (req, res) => {\r\n  if (!req.body.username || !req.body.password) {\r\n    return res.json({\r\n      success: false,\r\n      message: 'Your entry contains a missing field.',\r\n    });\r\n  }\r\n  pool.connect((err, client, done) => {\r\n    if (err) {\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: err,\r\n      });\r\n    }\r\n    client.query('SELECT userid, username, password FROM users WHERE username=$1', [\r\n        req.body.username,\r\n      ], (errors, result) => {\r\n        if (result && result.rows.length === 1) {\r\n            bcrypt.compare(req.body.password, result.rows[0].password, (err, bcryptres) => {\r\n              if (bcryptres) {\r\n                const authUser = result.rows[0];\r\n                jwt.sign({\r\n                  authUser,\r\n                }, process.env.JWT_SECRET_KEY, (jwerror, jwtoken) => {\r\n                  if (jwerror) {\r\n                    return res.status(200).json({\r\n                      success: false,\r\n                      message: 'An error occured',\r\n                    });\r\n                  }\r\n                  return res.status(201).json({\r\n                    success: true,\r\n                    message: 'Login success',\r\n                    token: jwtoken,\r\n                  });\r\n                });\r\n              } else {\r\n                return res.status(401).json({\r\n                  success: false,\r\n                  message: 'The Password supplied does not match the username',\r\n                });\r\n              }\r\n            });\r\n          } else {\r\n          res.status(404).json({\r\n            success: false,\r\n            message: 'User was not found!',\r\n          });\r\n        }\r\n      });\r\n    done();\r\n  });\r\n});\r\n\r\nconst testEmail = (email) => {\r\n  const emailregex = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n  return emailregex.test(email);\r\n};\r\n\r\nconst testUsername = (username) => {\r\n  const usernameregex = /^[a-zA-Z]+[a-zA-Z0-9_]+$/;\r\n  return usernameregex.test(username);\r\n};\r\n\r\nrouter.post('/signup', (req, res) => {\r\n  if (!req.body.username || !req.body.email || !req.body.password) {\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: 'Your entry contains a missing field.',\r\n    });\r\n  }\r\n  if (!req.body.username.trim() || !req.body.email.trim() || !req.body.password.trim()) {\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: 'One of your entries is empty.',\r\n    });\r\n  }\r\n  if (!testEmail(req.body.email)) {\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: 'The email that you entered is invalid',\r\n    });\r\n  }\r\n  if (!testUsername(req.body.username)) {\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: 'Usernames must start with alphabets and should not contain wilcards',\r\n    });\r\n  }\r\n    pool.connect((err, client, done) => {\r\n      if (err) {\r\n        return res.status(500).json({\r\n          success: false,\r\n          message: err,\r\n        });\r\n      }\r\n      client.query('SELECT * FROM users WHERE username=$1', [req.body.username], (error, result) => {\r\n        if (result && result.rows.length > 0) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'This username already exists, Please select another username',\r\n          });\r\n        } else {\r\n          bcrypt.hash(req.body.password, saltRounds, (err, hash) => {\r\n            if (err) {\r\n              return res.status(417).json({\r\n                success: false,\r\n                message: 'There was a hashing error',\r\n              });\r\n            }\r\n            pool.connect((error, client, done) => {\r\n              client.query('INSERT INTO users(username, email, password) VALUES($1, $2, $3)', [\r\n                req.body.username,\r\n                req.body.email,\r\n                hash,\r\n              ]);\r\n              client.query('SELECT userid, username, password FROM users WHERE username=$1', [req.body.username], (err, result) => {\r\n              const authUser = result.rows[0];\r\n              jwt.sign({\r\n                authUser,\r\n              }, process.env.JWT_SECRET_KEY, (jwterror, jwtoken) => {\r\n                if (jwterror) {\r\n                  return res.status(417).json({\r\n                    success: false,\r\n                    message: err,\r\n                  });\r\n                }\r\n                return res.status(201).json({\r\n                  success: true,\r\n                  message: 'Signup success',\r\n                  token: jwtoken,\r\n                });\r\n              });\r\n            });\r\n            done();\r\n            });\r\n          });\r\n        }\r\n      });\r\n      done();\r\n    });\r\n});\r\n\r\nrouter.get('/signout', (req, res) => {\r\n  res.status(200).json({\r\n    message: 'You have been successfully signed out of the platform.',\r\n    success: true,\r\n  });\r\n});\r\n\r\nrouter.get('/users', verifyToken, (req, res) => {\r\n  jwt.verify(req.token, process.env.JWT_SECRET_KEY, (error, userData) => {\r\n    if (error) {\r\n      res.status(401).json({\r\n        success: true,\r\n        message: 'An error occured while verifying token',\r\n      });\r\n    } else {\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Retrieve Success',\r\n        username: userData.authUser.username,\r\n        userid: userData.authUser.userid,\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nexport default router;\r\n"]}